import tkinter as tk
from tkinter import messagebox, Canvas, Scrollbar
from PIL import Image, ImageTk
import random
import os

# Información sobre los personajes
personajes = {
    "Violeta Plum": {
        "profesion": "Profesora de matemáticas",
        "imagen": "violeta_plum.jpg",
        "historia_adicional": "Violeta Plum es conocida por su afición a la jardinería. Pasaba muchas horas en la biblioteca investigando sobre plantas exóticas"
    },
    "Ruben Mostaza": {
        "profesion": "Coronel retirado",
        "imagen": "ruben_mostaza.jpg",
        "historia_adicional": "Ruben Mostaza solía organizar cenas temáticas en la cocina para sus amigos y familiares. Él estaba planeando una cena sorpresa para su esposa."
    },
    "Celeste Azul": {
        "profesion": "Joven artista",
        "imagen": "celeste_azul.jpg",
        "historia_adicional": "Celeste Azul estaba trabajando en una nueva pintura en la sala de estar. Era su lugar favorito para encontrar inspiración."
    },
    "Bruno Verde": {
        "profesion": "Reverendo de la parroquia",
        "imagen": "bruno_verde.jpg",
        "historia_adicional": "Bruno Verde dedicaba su tiempo libre a cuidar del jardín. Consideraba el jardín como un lugar sagrado."
    },
    "Rosa Madero": {
        "profesion": "Doctora especializada en enfermedades infecciosas",
        "imagen": "rosa_madero.jpg",
        "historia_adicional": "Rosa Madero era una entusiasta de la mecánica. Pasaba horas en su cuarto desmontando y arreglando dispositivos."
    }
}

# Lista de herramientas
herramientas = ["Candelabro", "Cuchillo de Cocina", "Revolver", "Cuerda", "Llave Inglesa"]

# Lista de lugares
lugares = ["Biblioteca", "Cocina", "Sala de estar", "Jardín", "Cuarto"]

# Lista de preguntas disponibles
preguntas_disponibles = [
    "¿Dónde estaba {}?",
    "¿Qué herramienta estaba usando {}?",
    "¿Dónde estaba {} y qué herramienta estaba usando?"
]

intentos_disponibles = 4
culpable_correcto = ""
ventana_juego = None

def hacer_pregunta(personaje, pregunta_idx):
    global intentos_disponibles
    
    if intentos_disponibles > 0:
        intentos_disponibles -= 1
        pregunta = preguntas_disponibles[pregunta_idx].format(personaje)
        respuesta = ""
        
        if pregunta_idx == 0:
            respuesta = personajes[personaje]["ubicacion"]
        elif pregunta_idx == 1:
            respuesta = personajes[personaje]["herramienta"]
        elif pregunta_idx == 2:
            respuesta = f"Estaba en la {personajes[personaje]['ubicacion']} usando: {personajes[personaje]['herramienta']}"
        
        messagebox.showinfo("Respuesta", f"{pregunta}\n\nRespuesta: {respuesta}")
        
        if intentos_disponibles == 0:
            messagebox.showinfo("Fin del juego", "Se acabaron los intentos. Intenta identificar al culpable.")
    else:
        messagebox.showinfo("Fin del juego", "Se acabaron los intentos. Intenta identificar al culpable.")

def verificar_eleccion(culpable_elegido):
    global intentos_disponibles, culpable_correcto
    
    if culpable_elegido == culpable_correcto:
        mensaje = f"¡Correcto! ¡Has descubierto al culpable! El verdadero culpable fue encontrado en la {personajes[culpable_correcto]['ubicacion']} usando: {personajes[culpable_correcto]['herramienta']}"
        messagebox.showinfo("Resultado", mensaje)
    else:
        mensaje = f"Incorrecto. Sigue investigando. El verdadero culpable fue encontrado en la {personajes[culpable_correcto]['ubicacion']} usando: {personajes[culpable_correcto]['herramienta']}"
        messagebox.showerror("Resultado", mensaje)
    
    intentos_disponibles = 4
    ventana_juego.destroy()
    mostrar_opciones_fin()

def iniciar_juego():
    global culpable_correcto, ventana_juego
    
    # Asignar aleatoriamente la herramienta y el lugar a cada personaje
    for personaje in personajes:
        personajes[personaje]["herramienta"] = random.choice(herramientas)
        personajes[personaje]["ubicacion"] = random.choice(lugares)
    
    # Elegir aleatoriamente el culpable
    culpable_correcto = random.choice(list(personajes.keys()))
    
    print("El personaje culpable es:", culpable_correcto)
    
    # Crear y configurar la ventana principal
    ventana_juego = tk.Tk()
    ventana_juego.title("Juego Clue")
    
    # Configurar el tamaño de la ventana y el canvas
    ancho_ventana = 500
    alto_ventana = 600
    ventana_juego.geometry(f"{ancho_ventana}x{alto_ventana}")
    
    canvas = Canvas(ventana_juego)
    canvas.pack(side="left", fill="both", expand=True)
    
    # Agregar scrollbar al canvas
    scrollbar = Scrollbar(ventana_juego, orient="vertical", command=canvas.yview)
    scrollbar.pack(side="right", fill="y")
    
    canvas.configure(yscrollcommand=scrollbar.set)
    canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
    
    # Crear el frame para los elementos del juego
    frame = tk.Frame(canvas)
    canvas.create_window((0, 0), window=frame, anchor="nw")
    
    # Establecer el fondo de la ventana

    
    historia_crimen = f"Ha ocurrido un crimen en la {personajes[culpable_correcto]['ubicacion']}!\nEl culpable, utilizó un/a {personajes[culpable_correcto]['herramienta'].lower()} para cometer el crimen."
    texto_historia = tk.Label(frame, text=historia_crimen, padx=20, pady=20, font=("Arial", 12))
    texto_historia.pack()
    
    texto_pregunta = tk.Label(frame, text="Haz hasta 4 preguntas sobre cada personaje:", padx=20, pady=10, font=("Arial", 12))
    texto_pregunta.pack()
    
    for personaje in personajes:
        imagen = Image.open(personajes[personaje]["imagen"])
        imagen = imagen.resize((50, 50), Image.ANTIALIAS)
        imagen_tk = ImageTk.PhotoImage(imagen)
        label_imagen = tk.Label(frame, image=imagen_tk)
        label_imagen.image = imagen_tk
        label_imagen.pack()
        
        # Mostrar la historia adicional del personaje
        historia_adicional_label = tk.Label(frame, text=personajes[personaje]["historia_adicional"], padx=20, pady=10, font=("Arial", 10), wraplength=400)
        historia_adicional_label.pack()
        
        boton_culpable = tk.Button(frame, text=personaje, command=lambda c=personaje: verificar_eleccion(c), padx=20, pady=10)
        boton_culpable.pack(pady=5)
    
    def abrir_preguntas():
        ventana_preguntas = tk.Toplevel()
        ventana_preguntas.title("Preguntas")
        
        for personaje in personajes:
            for idx in range(3):
                pregunta_btn = tk.Button(ventana_preguntas, text=preguntas_disponibles[idx].format(personaje), 
                                         command=lambda p=personaje, i=idx: hacer_pregunta(p, i), padx=20, pady=10)
                pregunta_btn.pack(pady=5)
    
    boton_preguntas = tk.Button(frame, text="Hacer preguntas sobre los personajes", command=abrir_preguntas, padx=20, pady=10)
    boton_preguntas.pack(pady=10)
    
    ventana_juego.mainloop()

def mostrar_opciones_fin():
    ventana_opciones = tk.Tk()
    ventana_opciones.title("Fin del juego")
    ventana_opciones.geometry("300x150")
    
    mensaje_fin = tk.Label(ventana_opciones, text="¿Quieres jugar de nuevo?", padx=20, pady=20, font=("Arial", 12))
    mensaje_fin.pack()
    
    def jugar_nuevo():
        ventana_opciones.destroy()
        iniciar_juego()
    
    def salir_juego():
        ventana_opciones.destroy()
        if ventana_juego:
            ventana_juego.destroy()
    
    boton_jugar_nuevo = tk.Button(ventana_opciones, text="Sí", command=jugar_nuevo, padx=20, pady=10)
    boton_jugar_nuevo.pack(side=tk.LEFT, padx=20)
    
    boton_salir = tk.Button(ventana_opciones, text="No", command=salir_juego, padx=20, pady=10)
    boton_salir.pack(side=tk.RIGHT, padx=20)
    
    ventana_opciones.mainloop()

# Iniciar el juego al ejecutar el script
iniciar_juego()
